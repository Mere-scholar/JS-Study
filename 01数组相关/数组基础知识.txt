javascript 数组相关

一、什么是数组
	数组：使用单独的变量名来储存一系列的值。
	
二、创建数组的三种方法
	1.常规方式：
		var myArr = new Array();
		myArr[0] = "a";   myArr[0] = "b";   myArr[0] = "n";
	
	2.简洁方式
		var myArr = new Array("a","b","s");
		
	3.字面量的方式：
		var myBooks = ["三国","水浒"];
	
三、访问数组
	通过指定数组名以及索引号，可以访问某个特定的元素
	访问数组的第一个元素
		var name = myBooks[0];
	修改数组的第一个元素
		myBooks[0] = "西游记";
	数组的下标是从0开始的；

四、数组中包含不同对象
	所有的javascript变量都是对象。数组元素是对象，函数也是对象，因此可以在数组中有不同的变量类型。
		例：
			var myArr = new Array();
			myArr[0] = Date.now();
			myArr[1] = (function () {
				console.log("数组中的对象")
			})();
			console.log(myArr[0]);
			
五、数组的方法与属性
	1.属性：
		constructor:返回创建数组对象的原型函数
			console.log(myArr.constructor)返回ƒ Array(){[native code]}
			
		length:设置返回数组的个数
		
		prototype：允许你向数组中添加属性或方法
			例：Array.prototype.myUcase = function  () {
					for (i=0;i<this.length;i++) {
						this[i]=this[i].toUpperCase();
					}
				}
				var code = ["abc" ,"dec"];
				code.myUcase();
				console.log(code[0])；
	
	2.方法：
		（1）、连接两个数组或者更多的数组---concat()
				A.concat(B);
		（2）、判断数组中是否有某一个元素---includes()
		（3）、搜索数组中的元素，并返回他所在的位置---indexOf()
				例子：
					var arr2 = [6,7,8,9];
					if(arr2.includes(7)){
						console.log("有"+arr2.indexOf(7))
					}
		（4）、判断对象是否为数组 isArray();
				alert(Array.isArray(arr))
		（5）、将数组中的元素放到一个字符串中---join(参数)
				join中的参数可以选择，指定要使用的分隔符，如果不填写默认使用逗号将其分开
				
		（6）、删除数组中的最后一个元素，并返回删除的元素---pop()
				eg:	A.pop(); 控制台可打出删除的元素
				
		（7）、向数组的最后添加一个或更多元素，返回新的长度---push()
				eg:A.push("a"); 控制台可打出添加后数组的新的长度值
		（8）、删除并返回数组的第一个元素 ---- A.shift();
		（9）、splice(); 删除元素，并像数组中添加新的元素
				可选参数：
					index：必须，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置
					howmany:必须，要删除的项目数量。如果设置为 0，则不会删除项目。
					item：可选，向数组中添加新的项目
		（10）、向数组的开头添加一个元素 --- A.unshift();
		（11）、颠倒数组中的元素顺序---A.reverse();
		（12）、数组的排序 -- sort(可选参数，必须为函数)
				sort的参数可填：function(a,b){return a-b};
				排序的顺序可以是字母或数字，并按照升序或降序
				注意：当数字是按照字母顺序排列时，“40”，在“5”之前
		（13）、选取数组中的一部分，并返回一个新的数组-- slice();
				slice()方法从以有的数组中提取元素，以新的字符串返回被提取的部分，不影响原始数组  slice(1,6);提取下标为1和6
		
		（14）、检测数组中是否有元素符合指定条件  --- some()
		（15）、toString() ---把数组转化成字符串，并返回结果
		

		
		
		
		
		
		
		
		
		
		
		